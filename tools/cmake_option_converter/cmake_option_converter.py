import re
import argparse

OUT_FILE = "ez_target_config.h"

def get_option(input_text:str) -> dict:
    """get option from input text.
       The input text should be in the format of option(name "description" value)

    Args:
        input_text (str): input text

    Returns:
        dict: option dictionary which has format of
        {"name": "option_name", "description": "option_description", "value": "option_value"}
    """
    match = re.search(r'^option\s*\((.*?)\)', input_text)
    if match:
        option = match.group(1).split("\"")
        if len(option) == 3:
            option_dict = {}
            
            #Remove prefix ENABLE_ as well
            option_dict["name"] = option[0][len("ENABLE_"):].strip()
            option_dict["description"] = option[1].strip()
            option_dict["value"] = option[2].strip()
            return option_dict
    return None

def get_options(input_file :str)->list[dict]:
    """get options from input file

    Args:
        input_file (str): input file

    Returns:
        list[dict]: list of options, each option is a dictionary which has format of
        {"name": "option_name", "description": "option_description", "value": "option_value"}
    """
    options = []
    with open(input_file, 'r') as f:
        lines = f.readlines()
        for line in lines:
            option = get_option(line)
            if option != None:
                options.append(option)
    return options

def main():
    parser = argparse.ArgumentParser(description='Convert cmake option to macro')
    parser.add_argument('-i', '--input_file', type=str, help='Input file')
    args = parser.parse_args()

    options = []
    options = get_options(args.input_file)

    if len(options) > 0:
        with open(OUT_FILE, 'w') as f:
            f.write("/* This file is automatically generated by cmake_option_converter.py */\n\n")
            f.write("#ifndef __EZ_TARGET_CONFIG_H__\n")
            f.write("#define __EZ_TARGET_CONFIG_H__\n\n")
            for option in options:
                f.write(f"/* {option['description']} */\n")
                f.write("#define {} {}\n\n".format(option['name'], "1" if option["value"] == "ON" else "0"))
            f.write("#endif\n")
            
if __name__ == "__main__":
    main()
